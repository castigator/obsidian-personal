/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => PinDailyNotePlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// setting.ts
var import_obsidian = require("obsidian");
var DEFAULT_SETTING = {
  whereToPin: "editor" /* EDITOR */,
  plugin: "daily-notes" /* DAILY_NOTES */
};
var whereToPinDropdownOptions = {
  ["editor" /* EDITOR */]: "Editor",
  ["leftSideBar" /* LEFT_SIDE_BAR */]: "Left Sidebar",
  ["rightSideBar" /* RIGHT_SIDE_BAR */]: "Right Sidebar"
};
var pluginDropdownOptions = {
  ["daily-notes" /* DAILY_NOTES */]: "Daily Notes (Core Plugin)",
  ["periodic-notes" /* PERIODIC_NOTES */]: "Periodic Notes (Community Plugin)"
};
var PinDailyNotePluginSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Pin Location").setDesc("Default place to pin new daily note").addDropdown((dropdown) => {
      dropdown.addOptions(whereToPinDropdownOptions);
      dropdown.setValue(
        this.plugin.settings.whereToPin || DEFAULT_SETTING.whereToPin
      );
      dropdown.onChange(async (value) => {
        this.plugin.settings.whereToPin = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Plugin").setDesc("Plugin to use for creating daily notes").addDropdown((dropdown) => {
      dropdown.addOptions(pluginDropdownOptions);
      dropdown.setValue(
        this.plugin.settings.plugin || DEFAULT_SETTING.plugin
      );
      dropdown.onChange(async (value) => {
        this.plugin.settings.plugin = value;
        await this.plugin.saveSettings();
      });
    });
  }
};

// main.ts
var PinDailyNotePlugin = class extends import_obsidian2.Plugin {
  constructor(app, manifest) {
    super(app, manifest);
    this.obsidianApp = app;
  }
  async onload() {
    const getLeafForDailyNote = (whereToPin) => {
      if (!whereToPin) {
        whereToPin = this.settings.whereToPin;
      }
      switch (whereToPin) {
        case "rightSideBar" /* RIGHT_SIDE_BAR */:
          return this.obsidianApp.workspace.getRightLeaf(false);
        case "leftSideBar" /* LEFT_SIDE_BAR */:
          return this.obsidianApp.workspace.getLeftLeaf(false);
        default:
          return this.obsidianApp.workspace.getLeaf(true);
      }
    };
    const handleDailyNote = async () => {
      const todayPath = this.getTodayNotePath();
      if (!todayPath)
        return;
      const leaves = this.obsidianApp.workspace.getLeavesOfType("markdown");
      let leaf = leaves.find((leaf2) => {
        var _a;
        const view = leaf2.view;
        return leaf2.pinned && this.isDailyNotePath((_a = view == null ? void 0 : view.file) == null ? void 0 : _a.path);
      });
      if (!(this.obsidianApp.vault.getAbstractFileByPath(todayPath) instanceof import_obsidian2.TFile)) {
        let dailyNotesCommand;
        if (this.settings.plugin === "daily-notes" /* DAILY_NOTES */) {
          dailyNotesCommand = this.obsidianApp.commands.commands["daily-notes"];
        } else {
          dailyNotesCommand = this.obsidianApp.commands.commands["periodic-notes:open-daily-note"];
        }
        if (dailyNotesCommand) {
          const newLeaf = getLeafForDailyNote("editor" /* EDITOR */);
          await dailyNotesCommand.callback();
          if (leaf || this.settings.whereToPin !== "editor" /* EDITOR */) {
            newLeaf.detach();
          } else {
            newLeaf.setPinned(true);
            return;
          }
        }
      }
      const todayFile = this.obsidianApp.vault.getAbstractFileByPath(todayPath);
      if (!leaf) {
        leaf = getLeafForDailyNote();
        leaf.setPinned(true);
      }
      if (todayFile instanceof import_obsidian2.TFile) {
        await leaf.openFile(todayFile);
        this.obsidianApp.workspace.setActiveLeaf(leaf, { focus: true });
      }
    };
    this.addRibbonIcon("calendar-plus", "Open today's daily note (Pinned)", () => {
      handleDailyNote();
    });
    this.addCommand({
      id: "open-todays-daily-note-pinned",
      name: "Open today's daily note",
      callback: () => handleDailyNote()
    });
    await this.loadSettings();
    this.addSettingTab(new PinDailyNotePluginSettingTab(this.app, this));
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTING, await this.loadData());
  }
  async saveSettings() {
    this.saveData(this.settings);
  }
  getTodayNotePath() {
    var _a, _b, _c;
    const dailyNotesPlugin = this.obsidianApp.internalPlugins.plugins["daily-notes"];
    if (!(dailyNotesPlugin == null ? void 0 : dailyNotesPlugin.enabled))
      return null;
    try {
      const settings = (_a = dailyNotesPlugin.instance) == null ? void 0 : _a.options;
      if (!settings)
        return null;
      const folder = ((_b = settings.folder) == null ? void 0 : _b.trim().replace(/\/$/, "")) || "";
      const format = ((_c = settings.format) == null ? void 0 : _c.trim()) || "YYYY-MM-DD";
      const date = window.moment();
      let filename = date.format(format);
      if (format.includes("/")) {
        const formattedPath = folder ? `${folder}/${filename}` : filename;
        return formattedPath + ".md";
      } else {
        const path = folder ? `${folder}/${filename}` : filename;
        return path + ".md";
      }
    } catch (error) {
      console.error("Error generating daily note path:", error);
      return null;
    }
  }
  isDailyNotePath(path) {
    var _a, _b, _c;
    if (!path)
      return false;
    const dailyNotesPlugin = this.obsidianApp.internalPlugins.plugins["daily-notes"];
    if (!(dailyNotesPlugin == null ? void 0 : dailyNotesPlugin.enabled))
      return false;
    try {
      const settings = (_a = dailyNotesPlugin.instance) == null ? void 0 : _a.options;
      if (!settings)
        return false;
      const folder = ((_b = settings.folder) == null ? void 0 : _b.trim().replace(/\/$/, "")) || "";
      if (folder && !path.startsWith(folder))
        return false;
      const filename = path.slice(folder ? folder.length + 1 : 0, -3);
      return window.moment(filename, ((_c = settings.format) == null ? void 0 : _c.trim()) || "YYYY-MM-DD", true).isValid();
    } catch (error) {
      return false;
    }
  }
};

/* nosourcemap */